{"mappings":"oeAAAA,EAAA,SA8BA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAjCEO,SAASC,cAAc,SAC/BC,iBAAiB,UAAWC,IACjCA,EAAEC,iBAEF,MAAMC,EAAW,IAAIC,SAASH,EAAEI,QAC1BC,EAAUC,SAASJ,EAASK,IAAI,SAAU,IAC1CC,EAAcF,SAASJ,EAASK,IAAI,QAAS,IAC7CE,EAASH,SAASJ,EAASK,IAAI,UAAW,IAGhD,IAAK,IAAIG,EAAI,EAAGA,EAAID,EAAQC,IAC1BtB,EAAcsB,EAAI,EAAGL,EAAUK,EAAIF,GAChCG,MAAK,EAACtB,SAAEA,EAAQC,MAAEA,MACjBsB,QAAQC,IAAI,uBAAqBxB,QAAiBC,MAAU,IAE7DwB,OAAM,EAACzB,SAAEA,EAAQC,MAAEA,MAClBsB,QAAQC,IAAI,sBAAoBxB,QAAiBC,MAAU,GAC3D","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from \"notiflix\";\n\n// const delayEl = document.querySelector('input[name=delay]');\n// const delayStepEl = document.querySelector('input[name=step]');\n// const amountEl = document.querySelector('input[name=amount]');\n// const btnEl = document.querySelector('button[type=submit]')\nconst formEl = document.querySelector('.form');\nformEl.addEventListener('submit', (e) => {\n  e.preventDefault()\n\n  const formData = new FormData(e.target);\n  const delayEl = parseInt(formData.get(\"delay\"), 10);\n  const delayStepEl = parseInt(formData.get(\"step\"), 10);\n  const amount = parseInt(formData.get(\"amount\"), 10);\n\n\n  for (let i = 0; i < amount; i++) {\n    createPromise(i + 1, delayEl + i * delayStepEl)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  };\n});\n\n\n\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay })\n      } else {\n        reject({ position, delay })\n      };\n    }, delay);\n  })\n}\n\n\n\n\n// function createPromise(position, delay) {\n//   setTimeout(() => {\n//     return new Promise((resolve, reject) => {\n//       const shouldResolve = Math.random() > 0.3;\n//       if (shouldResolve) {\n//         resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//       } else {\n//         reject(`❌ Rejected promise ${position} in ${delay}ms`);\n//       };\n//     });\n//   }, delay);\n// };\n// const show = () => {\n//   let delay = +delayEl.value;\n\n//   for (let i = 1; i <= amountEl.value; i++) {\n//     createPromise(i, delay).then(resolve => {\n//         Notiflix.Notify.success('Fulfilled promise');\n//       }).catch(reject => {\n//         Notiflix.Notify.failure('Rejected promise');\n//       });\n//     delay += +delayStepEl.value;\n//   }\n// };\n\n// btnEl.addEventListener('click', (e) => {\n//   e.preventDefault()\n//   show()\n// })\n\n\n\n"],"names":["parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","document","querySelector","addEventListener","e","preventDefault","formData","FormData","target","delayEl","parseInt","get","delayStepEl","amount","i","then","console","log","catch"],"version":3,"file":"03-promises.0af2c979.js.map"}